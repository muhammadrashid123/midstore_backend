"""
Django settings for midstore_backend project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
import yaml
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.

BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%=!@zqj@_qh@7w=!jzb(=+r7waheg_ny@e0+t_x7y%d6z5l3)3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# get secret varibales:
try:
    file_path = os.path.join(BASE_DIR, "secrets.yaml")
    with open(file_path) as file:
        secrets = yaml.full_load(file.read())
except Exception as e:
    with open(file_path) as file:
        secrets = yaml.full_load(file.read())
        
def get_secret(key, secrets=secrets):
    """Get the secret variables."""
    for dict_ in secrets:
        if key in dict_:
            if isinstance(dict_[key], list):
                return dict_[key][0]
            return dict_[key]

# Application definition

INSTALLED_APPS = [
    # First party apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    ###################
    # Second party apps
    # Second party apps
    # Second party apps
    ###################
    "authentication",
    "customer_management",
    "seller_management",
    "product_management",
    "user_profile",
    "common",

    ###################
    # Second party apps
    # Second party apps
    # Second party apps
    ###################

    # Third pary apps
    'rest_framework',
    'django_filters',
    'corsheaders',
    'rest_framework.authtoken'
]


REST_FRAMEWORK = {

    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
    'rest_framework.authentication.BasicAuthentication',
    'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_TOKEN_MODEL': 'authentication.models',
}

MIDDLEWARE = [
    # For Cross Origin Resource Sharing
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Token validation middleware
    # "authentication.auth_middleware.TokenValidationMiddleware",
]

ROOT_URLCONF = 'midstore_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'midstore_backend.wsgi.application'

# User Model
AUTH_USER_MODEL = "user_profile.User"

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'OPTIONS': {"options": "-c search_path=public"},
        'NAME': get_secret('db_name'),
        'USER': get_secret('db_user'),
        'PASSWORD': get_secret('db_password'),
        'HOST': get_secret('db_host'),
        'PORT': get_secret('db_port'),
        'CONN_MAX_AGE': 600,
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Locale configuration for server response message e.g. en, ar, fr etc
MSG_LOCALE = "en"

# Media urls
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
